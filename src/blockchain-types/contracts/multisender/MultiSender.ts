/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface MultiSenderInterface extends utils.Interface {
  functions: {
    "arrayLimit()": FunctionFragment;
    "baseFee()": FunctionFragment;
    "feePerAccount()": FunctionFragment;
    "initialize(uint256,uint256,uint256)": FunctionFragment;
    "multiSend(address,address[],uint256[])": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setArrayLimit(uint256)": FunctionFragment;
    "setBaseFee(uint256)": FunctionFragment;
    "setFeePerAccount(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "withdraw(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "arrayLimit"
      | "baseFee"
      | "feePerAccount"
      | "initialize"
      | "multiSend"
      | "owner"
      | "renounceOwnership"
      | "setArrayLimit"
      | "setBaseFee"
      | "setFeePerAccount"
      | "transferOwnership"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "arrayLimit",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "baseFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "feePerAccount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "multiSend",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setArrayLimit",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setBaseFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeePerAccount",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "arrayLimit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "baseFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feePerAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "multiSend", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setArrayLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setBaseFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFeePerAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "ArrayLimitChanged(address,uint256)": EventFragment;
    "BaseFeeChanged(address,uint256)": EventFragment;
    "FeePerAccountChanged(address,uint256)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Sent(address,address,address,uint256)": EventFragment;
    "Withdrawn(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ArrayLimitChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BaseFeeChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeePerAccountChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Sent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawn"): EventFragment;
}

export interface ArrayLimitChangedEventObject {
  _operator: string;
  _arrayLimit: BigNumber;
}
export type ArrayLimitChangedEvent = TypedEvent<
  [string, BigNumber],
  ArrayLimitChangedEventObject
>;

export type ArrayLimitChangedEventFilter =
  TypedEventFilter<ArrayLimitChangedEvent>;

export interface BaseFeeChangedEventObject {
  _operator: string;
  _fee: BigNumber;
}
export type BaseFeeChangedEvent = TypedEvent<
  [string, BigNumber],
  BaseFeeChangedEventObject
>;

export type BaseFeeChangedEventFilter = TypedEventFilter<BaseFeeChangedEvent>;

export interface FeePerAccountChangedEventObject {
  _operator: string;
  _feePerAccount: BigNumber;
}
export type FeePerAccountChangedEvent = TypedEvent<
  [string, BigNumber],
  FeePerAccountChangedEventObject
>;

export type FeePerAccountChangedEventFilter =
  TypedEventFilter<FeePerAccountChangedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface SentEventObject {
  _token: string;
  _sourceAccount: string;
  _targetAccount: string;
  _amount: BigNumber;
}
export type SentEvent = TypedEvent<
  [string, string, string, BigNumber],
  SentEventObject
>;

export type SentEventFilter = TypedEventFilter<SentEvent>;

export interface WithdrawnEventObject {
  _operator: string;
  _to: string;
  _balance: BigNumber;
}
export type WithdrawnEvent = TypedEvent<
  [string, string, BigNumber],
  WithdrawnEventObject
>;

export type WithdrawnEventFilter = TypedEventFilter<WithdrawnEvent>;

export interface MultiSender extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MultiSenderInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    arrayLimit(overrides?: CallOverrides): Promise<[BigNumber]>;

    baseFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    feePerAccount(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      _arrayLimit: PromiseOrValue<BigNumberish>,
      _feePerAccount: PromiseOrValue<BigNumberish>,
      _fees: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    multiSend(
      _token: PromiseOrValue<string>,
      _accounts: PromiseOrValue<string>[],
      _amounts: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setArrayLimit(
      _arrayLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setBaseFee(
      _fees: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFeePerAccount(
      _feePerAccount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  arrayLimit(overrides?: CallOverrides): Promise<BigNumber>;

  baseFee(overrides?: CallOverrides): Promise<BigNumber>;

  feePerAccount(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    _arrayLimit: PromiseOrValue<BigNumberish>,
    _feePerAccount: PromiseOrValue<BigNumberish>,
    _fees: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  multiSend(
    _token: PromiseOrValue<string>,
    _accounts: PromiseOrValue<string>[],
    _amounts: PromiseOrValue<BigNumberish>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setArrayLimit(
    _arrayLimit: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setBaseFee(
    _fees: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFeePerAccount(
    _feePerAccount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    _to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    arrayLimit(overrides?: CallOverrides): Promise<BigNumber>;

    baseFee(overrides?: CallOverrides): Promise<BigNumber>;

    feePerAccount(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _arrayLimit: PromiseOrValue<BigNumberish>,
      _feePerAccount: PromiseOrValue<BigNumberish>,
      _fees: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    multiSend(
      _token: PromiseOrValue<string>,
      _accounts: PromiseOrValue<string>[],
      _amounts: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setArrayLimit(
      _arrayLimit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setBaseFee(
      _fees: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeePerAccount(
      _feePerAccount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      _to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ArrayLimitChanged(address,uint256)"(
      _operator?: null,
      _arrayLimit?: null
    ): ArrayLimitChangedEventFilter;
    ArrayLimitChanged(
      _operator?: null,
      _arrayLimit?: null
    ): ArrayLimitChangedEventFilter;

    "BaseFeeChanged(address,uint256)"(
      _operator?: null,
      _fee?: null
    ): BaseFeeChangedEventFilter;
    BaseFeeChanged(_operator?: null, _fee?: null): BaseFeeChangedEventFilter;

    "FeePerAccountChanged(address,uint256)"(
      _operator?: null,
      _feePerAccount?: null
    ): FeePerAccountChangedEventFilter;
    FeePerAccountChanged(
      _operator?: null,
      _feePerAccount?: null
    ): FeePerAccountChangedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "Sent(address,address,address,uint256)"(
      _token?: null,
      _sourceAccount?: null,
      _targetAccount?: null,
      _amount?: null
    ): SentEventFilter;
    Sent(
      _token?: null,
      _sourceAccount?: null,
      _targetAccount?: null,
      _amount?: null
    ): SentEventFilter;

    "Withdrawn(address,address,uint256)"(
      _operator?: PromiseOrValue<string> | null,
      _to?: PromiseOrValue<string> | null,
      _balance?: null
    ): WithdrawnEventFilter;
    Withdrawn(
      _operator?: PromiseOrValue<string> | null,
      _to?: PromiseOrValue<string> | null,
      _balance?: null
    ): WithdrawnEventFilter;
  };

  estimateGas: {
    arrayLimit(overrides?: CallOverrides): Promise<BigNumber>;

    baseFee(overrides?: CallOverrides): Promise<BigNumber>;

    feePerAccount(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _arrayLimit: PromiseOrValue<BigNumberish>,
      _feePerAccount: PromiseOrValue<BigNumberish>,
      _fees: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    multiSend(
      _token: PromiseOrValue<string>,
      _accounts: PromiseOrValue<string>[],
      _amounts: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setArrayLimit(
      _arrayLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setBaseFee(
      _fees: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFeePerAccount(
      _feePerAccount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdraw(
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    arrayLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    baseFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feePerAccount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _arrayLimit: PromiseOrValue<BigNumberish>,
      _feePerAccount: PromiseOrValue<BigNumberish>,
      _fees: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    multiSend(
      _token: PromiseOrValue<string>,
      _accounts: PromiseOrValue<string>[],
      _amounts: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setArrayLimit(
      _arrayLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setBaseFee(
      _fees: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFeePerAccount(
      _feePerAccount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
