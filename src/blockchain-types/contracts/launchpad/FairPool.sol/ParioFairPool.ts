/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace LibPresale {
  export type FairLaunchStruct = {
    router: PromiseOrValue<string>;
    governance: PromiseOrValue<string>;
    token: PromiseOrValue<string>;
    payment_currency: PromiseOrValue<string>;
    softCap: PromiseOrValue<BigNumberish>;
    totalToken: PromiseOrValue<BigNumberish>;
    startTime: PromiseOrValue<BigNumberish>;
    endTime: PromiseOrValue<BigNumberish>;
    feeIndex: PromiseOrValue<BigNumberish>;
    liquidityLockDays: PromiseOrValue<BigNumberish>;
    liquidityPercent: PromiseOrValue<BigNumberish>;
    refundType: PromiseOrValue<BigNumberish>;
    poolDetails: PromiseOrValue<string>;
  };

  export type FairLaunchStructOutput = [
    string,
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string
  ] & {
    router: string;
    governance: string;
    token: string;
    payment_currency: string;
    softCap: BigNumber;
    totalToken: BigNumber;
    startTime: BigNumber;
    endTime: BigNumber;
    feeIndex: BigNumber;
    liquidityLockDays: BigNumber;
    liquidityPercent: BigNumber;
    refundType: BigNumber;
    poolDetails: string;
  };
}

export interface ParioFairPoolInterface extends utils.Interface {
  functions: {
    "MINIMUM_LOCK_DAYS()": FunctionFragment;
    "VERSION()": FunctionFragment;
    "cancel()": FunctionFragment;
    "claim()": FunctionFragment;
    "claimedOf(address)": FunctionFragment;
    "completedKyc()": FunctionFragment;
    "contribute(uint256)": FunctionFragment;
    "contributionOf(address)": FunctionFragment;
    "emergencyWithdraw(address,uint256)": FunctionFragment;
    "emergencyWithdrawContribution()": FunctionFragment;
    "emergencyWithdrawLiquidity(address,address,uint256)": FunctionFragment;
    "emergencyWithdrawToken(address,address,uint256)": FunctionFragment;
    "endTime()": FunctionFragment;
    "factory()": FunctionFragment;
    "finalize()": FunctionFragment;
    "getDecimal()": FunctionFragment;
    "getPoolInfo()": FunctionFragment;
    "getPrice()": FunctionFragment;
    "governance()": FunctionFragment;
    "initialize((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,string),uint256[2],address[3],uint8)": FunctionFragment;
    "liquidityLockDays()": FunctionFragment;
    "liquidityPercent()": FunctionFragment;
    "liquidityUnlockTime()": FunctionFragment;
    "owner()": FunctionFragment;
    "payment_currency()": FunctionFragment;
    "poolDetails()": FunctionFragment;
    "poolState()": FunctionFragment;
    "poolType()": FunctionFragment;
    "rate()": FunctionFragment;
    "refundType()": FunctionFragment;
    "refundedOf(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "router()": FunctionFragment;
    "setGovernance(address)": FunctionFragment;
    "softCap()": FunctionFragment;
    "startTime()": FunctionFragment;
    "token()": FunctionFragment;
    "totalClaimed()": FunctionFragment;
    "totalRaised()": FunctionFragment;
    "totalRefunded()": FunctionFragment;
    "totalToken()": FunctionFragment;
    "totalVolumePurchased()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateCompletedKyc(bool)": FunctionFragment;
    "updatePoolDetails(string)": FunctionFragment;
    "userAvalibleClaim(address)": FunctionFragment;
    "withdrawContribution()": FunctionFragment;
    "withdrawLeftovers()": FunctionFragment;
    "withdrawLiquidity()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "MINIMUM_LOCK_DAYS"
      | "VERSION"
      | "cancel"
      | "claim"
      | "claimedOf"
      | "completedKyc"
      | "contribute"
      | "contributionOf"
      | "emergencyWithdraw"
      | "emergencyWithdrawContribution"
      | "emergencyWithdrawLiquidity"
      | "emergencyWithdrawToken"
      | "endTime"
      | "factory"
      | "finalize"
      | "getDecimal"
      | "getPoolInfo"
      | "getPrice"
      | "governance"
      | "initialize"
      | "liquidityLockDays"
      | "liquidityPercent"
      | "liquidityUnlockTime"
      | "owner"
      | "payment_currency"
      | "poolDetails"
      | "poolState"
      | "poolType"
      | "rate"
      | "refundType"
      | "refundedOf"
      | "renounceOwnership"
      | "router"
      | "setGovernance"
      | "softCap"
      | "startTime"
      | "token"
      | "totalClaimed"
      | "totalRaised"
      | "totalRefunded"
      | "totalToken"
      | "totalVolumePurchased"
      | "transferOwnership"
      | "updateCompletedKyc"
      | "updatePoolDetails"
      | "userAvalibleClaim"
      | "withdrawContribution"
      | "withdrawLeftovers"
      | "withdrawLiquidity"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "MINIMUM_LOCK_DAYS",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "VERSION", values?: undefined): string;
  encodeFunctionData(functionFragment: "cancel", values?: undefined): string;
  encodeFunctionData(functionFragment: "claim", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "claimedOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "completedKyc",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "contribute",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "contributionOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdrawContribution",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdrawLiquidity",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdrawToken",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "endTime", values?: undefined): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(functionFragment: "finalize", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getDecimal",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolInfo",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getPrice", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "governance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      LibPresale.FairLaunchStruct,
      [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<string>],
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidityLockDays",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidityPercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidityUnlockTime",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "payment_currency",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "poolDetails",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "poolState", values?: undefined): string;
  encodeFunctionData(functionFragment: "poolType", values?: undefined): string;
  encodeFunctionData(functionFragment: "rate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "refundType",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "refundedOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "router", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setGovernance",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "softCap", values?: undefined): string;
  encodeFunctionData(functionFragment: "startTime", values?: undefined): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalClaimed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalRaised",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalRefunded",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalVolumePurchased",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateCompletedKyc",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePoolDetails",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "userAvalibleClaim",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawContribution",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawLeftovers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawLiquidity",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "MINIMUM_LOCK_DAYS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "VERSION", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cancel", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimedOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "completedKyc",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "contribute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "contributionOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdrawContribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdrawLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdrawToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "endTime", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "finalize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getDecimal", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPoolInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPrice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "governance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidityLockDays",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidityPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidityUnlockTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "payment_currency",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "poolDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "poolState", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "poolType", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "refundType", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "refundedOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "router", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "softCap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "startTime", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalClaimed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalRaised",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalRefunded",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totalToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalVolumePurchased",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateCompletedKyc",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePoolDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userAvalibleClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawContribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawLeftovers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawLiquidity",
    data: BytesLike
  ): Result;

  events: {
    "Cancelled(address,uint256)": EventFragment;
    "Claimed(address,uint256,uint256,address)": EventFragment;
    "Contributed(address,uint256,address,uint256)": EventFragment;
    "ContributionWithdrawn(address,uint256,address)": EventFragment;
    "EmergencyLiquidityWithdrawn(address,address,uint256,address)": EventFragment;
    "EmergencyWithdrawn(address,address,uint256,address)": EventFragment;
    "Finalized(address,address,uint256,uint256,uint256)": EventFragment;
    "GovernanceChanged(address,address,address)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "KycUpdated(bool,uint256)": EventFragment;
    "LiquidityWithdrawn(address,address,uint256,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PoolStartAtChanged(uint256,uint256)": EventFragment;
    "PoolUpdated(address,address,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Cancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Claimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Contributed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ContributionWithdrawn"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "EmergencyLiquidityWithdrawn"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EmergencyWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Finalized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GovernanceChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "KycUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidityWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolStartAtChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolUpdated"): EventFragment;
}

export interface CancelledEventObject {
  pool_address: string;
  timestamp: BigNumber;
}
export type CancelledEvent = TypedEvent<
  [string, BigNumber],
  CancelledEventObject
>;

export type CancelledEventFilter = TypedEventFilter<CancelledEvent>;

export interface ClaimedEventObject {
  pool_address: string;
  total_claimed: BigNumber;
  pending_claim: BigNumber;
  user_address: string;
}
export type ClaimedEvent = TypedEvent<
  [string, BigNumber, BigNumber, string],
  ClaimedEventObject
>;

export type ClaimedEventFilter = TypedEventFilter<ClaimedEvent>;

export interface ContributedEventObject {
  pool_address: string;
  value: BigNumber;
  user: string;
  totalRaised: BigNumber;
}
export type ContributedEvent = TypedEvent<
  [string, BigNumber, string, BigNumber],
  ContributedEventObject
>;

export type ContributedEventFilter = TypedEventFilter<ContributedEvent>;

export interface ContributionWithdrawnEventObject {
  pool_address: string;
  amount: BigNumber;
  user: string;
}
export type ContributionWithdrawnEvent = TypedEvent<
  [string, BigNumber, string],
  ContributionWithdrawnEventObject
>;

export type ContributionWithdrawnEventFilter =
  TypedEventFilter<ContributionWithdrawnEvent>;

export interface EmergencyLiquidityWithdrawnEventObject {
  pool_address: string;
  user: string;
  amount: BigNumber;
  pair: string;
}
export type EmergencyLiquidityWithdrawnEvent = TypedEvent<
  [string, string, BigNumber, string],
  EmergencyLiquidityWithdrawnEventObject
>;

export type EmergencyLiquidityWithdrawnEventFilter =
  TypedEventFilter<EmergencyLiquidityWithdrawnEvent>;

export interface EmergencyWithdrawnEventObject {
  pool_address: string;
  user: string;
  amount: BigNumber;
  pair: string;
}
export type EmergencyWithdrawnEvent = TypedEvent<
  [string, string, BigNumber, string],
  EmergencyWithdrawnEventObject
>;

export type EmergencyWithdrawnEventFilter =
  TypedEventFilter<EmergencyWithdrawnEvent>;

export interface FinalizedEventObject {
  pool_address: string;
  user: string;
  bnb_fee: BigNumber;
  total_raised: BigNumber;
  actual_raised: BigNumber;
}
export type FinalizedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber],
  FinalizedEventObject
>;

export type FinalizedEventFilter = TypedEventFilter<FinalizedEvent>;

export interface GovernanceChangedEventObject {
  pool_address: string;
  _old: string;
  _new: string;
}
export type GovernanceChangedEvent = TypedEvent<
  [string, string, string],
  GovernanceChangedEventObject
>;

export type GovernanceChangedEventFilter =
  TypedEventFilter<GovernanceChangedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface KycUpdatedEventObject {
  completed: boolean;
  timestamp: BigNumber;
}
export type KycUpdatedEvent = TypedEvent<
  [boolean, BigNumber],
  KycUpdatedEventObject
>;

export type KycUpdatedEventFilter = TypedEventFilter<KycUpdatedEvent>;

export interface LiquidityWithdrawnEventObject {
  pool_address: string;
  user: string;
  amount: BigNumber;
  pair: string;
}
export type LiquidityWithdrawnEvent = TypedEvent<
  [string, string, BigNumber, string],
  LiquidityWithdrawnEventObject
>;

export type LiquidityWithdrawnEventFilter =
  TypedEventFilter<LiquidityWithdrawnEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PoolStartAtChangedEventObject {
  timestamp: BigNumber;
  start_at: BigNumber;
}
export type PoolStartAtChangedEvent = TypedEvent<
  [BigNumber, BigNumber],
  PoolStartAtChangedEventObject
>;

export type PoolStartAtChangedEventFilter =
  TypedEventFilter<PoolStartAtChangedEvent>;

export interface PoolUpdatedEventObject {
  pool_address: string;
  user: string;
  details: string;
}
export type PoolUpdatedEvent = TypedEvent<
  [string, string, string],
  PoolUpdatedEventObject
>;

export type PoolUpdatedEventFilter = TypedEventFilter<PoolUpdatedEvent>;

export interface ParioFairPool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ParioFairPoolInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    MINIMUM_LOCK_DAYS(overrides?: CallOverrides): Promise<[BigNumber]>;

    VERSION(overrides?: CallOverrides): Promise<[number]>;

    cancel(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claim(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimedOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    completedKyc(overrides?: CallOverrides): Promise<[boolean]>;

    contribute(
      _funds: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    contributionOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    emergencyWithdraw(
      to_: PromiseOrValue<string>,
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    emergencyWithdrawContribution(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    emergencyWithdrawLiquidity(
      token_: PromiseOrValue<string>,
      to_: PromiseOrValue<string>,
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    emergencyWithdrawToken(
      payaddress: PromiseOrValue<string>,
      tokenAddress: PromiseOrValue<string>,
      tokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    endTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    factory(overrides?: CallOverrides): Promise<[string]>;

    finalize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getDecimal(overrides?: CallOverrides): Promise<[number]>;

    getPoolInfo(
      overrides?: CallOverrides
    ): Promise<[string, number[], BigNumber[], string, string, string]>;

    getPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    governance(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      presale: LibPresale.FairLaunchStruct,
      _fees: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      _linkAddress: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>
      ],
      _version: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    liquidityLockDays(overrides?: CallOverrides): Promise<[BigNumber]>;

    liquidityPercent(overrides?: CallOverrides): Promise<[BigNumber]>;

    liquidityUnlockTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    payment_currency(overrides?: CallOverrides): Promise<[string]>;

    poolDetails(overrides?: CallOverrides): Promise<[string]>;

    poolState(overrides?: CallOverrides): Promise<[number]>;

    poolType(overrides?: CallOverrides): Promise<[number]>;

    rate(overrides?: CallOverrides): Promise<[BigNumber]>;

    refundType(overrides?: CallOverrides): Promise<[BigNumber]>;

    refundedOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    router(overrides?: CallOverrides): Promise<[string]>;

    setGovernance(
      governance_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    softCap(overrides?: CallOverrides): Promise<[BigNumber]>;

    startTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    token(overrides?: CallOverrides): Promise<[string]>;

    totalClaimed(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalRaised(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalRefunded(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalToken(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalVolumePurchased(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateCompletedKyc(
      completed_: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updatePoolDetails(
      details_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    userAvalibleClaim(
      _userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    withdrawContribution(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawLeftovers(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawLiquidity(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  MINIMUM_LOCK_DAYS(overrides?: CallOverrides): Promise<BigNumber>;

  VERSION(overrides?: CallOverrides): Promise<number>;

  cancel(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claim(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimedOf(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  completedKyc(overrides?: CallOverrides): Promise<boolean>;

  contribute(
    _funds: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  contributionOf(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  emergencyWithdraw(
    to_: PromiseOrValue<string>,
    amount_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  emergencyWithdrawContribution(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  emergencyWithdrawLiquidity(
    token_: PromiseOrValue<string>,
    to_: PromiseOrValue<string>,
    amount_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  emergencyWithdrawToken(
    payaddress: PromiseOrValue<string>,
    tokenAddress: PromiseOrValue<string>,
    tokens: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  endTime(overrides?: CallOverrides): Promise<BigNumber>;

  factory(overrides?: CallOverrides): Promise<string>;

  finalize(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getDecimal(overrides?: CallOverrides): Promise<number>;

  getPoolInfo(
    overrides?: CallOverrides
  ): Promise<[string, number[], BigNumber[], string, string, string]>;

  getPrice(overrides?: CallOverrides): Promise<BigNumber>;

  governance(overrides?: CallOverrides): Promise<string>;

  initialize(
    presale: LibPresale.FairLaunchStruct,
    _fees: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
    _linkAddress: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ],
    _version: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  liquidityLockDays(overrides?: CallOverrides): Promise<BigNumber>;

  liquidityPercent(overrides?: CallOverrides): Promise<BigNumber>;

  liquidityUnlockTime(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  payment_currency(overrides?: CallOverrides): Promise<string>;

  poolDetails(overrides?: CallOverrides): Promise<string>;

  poolState(overrides?: CallOverrides): Promise<number>;

  poolType(overrides?: CallOverrides): Promise<number>;

  rate(overrides?: CallOverrides): Promise<BigNumber>;

  refundType(overrides?: CallOverrides): Promise<BigNumber>;

  refundedOf(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  router(overrides?: CallOverrides): Promise<string>;

  setGovernance(
    governance_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  softCap(overrides?: CallOverrides): Promise<BigNumber>;

  startTime(overrides?: CallOverrides): Promise<BigNumber>;

  token(overrides?: CallOverrides): Promise<string>;

  totalClaimed(overrides?: CallOverrides): Promise<BigNumber>;

  totalRaised(overrides?: CallOverrides): Promise<BigNumber>;

  totalRefunded(overrides?: CallOverrides): Promise<BigNumber>;

  totalToken(overrides?: CallOverrides): Promise<BigNumber>;

  totalVolumePurchased(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateCompletedKyc(
    completed_: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updatePoolDetails(
    details_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  userAvalibleClaim(
    _userAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  withdrawContribution(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawLeftovers(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawLiquidity(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    MINIMUM_LOCK_DAYS(overrides?: CallOverrides): Promise<BigNumber>;

    VERSION(overrides?: CallOverrides): Promise<number>;

    cancel(overrides?: CallOverrides): Promise<void>;

    claim(overrides?: CallOverrides): Promise<void>;

    claimedOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    completedKyc(overrides?: CallOverrides): Promise<boolean>;

    contribute(
      _funds: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    contributionOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    emergencyWithdraw(
      to_: PromiseOrValue<string>,
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    emergencyWithdrawContribution(overrides?: CallOverrides): Promise<boolean>;

    emergencyWithdrawLiquidity(
      token_: PromiseOrValue<string>,
      to_: PromiseOrValue<string>,
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    emergencyWithdrawToken(
      payaddress: PromiseOrValue<string>,
      tokenAddress: PromiseOrValue<string>,
      tokens: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    endTime(overrides?: CallOverrides): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<string>;

    finalize(overrides?: CallOverrides): Promise<void>;

    getDecimal(overrides?: CallOverrides): Promise<number>;

    getPoolInfo(
      overrides?: CallOverrides
    ): Promise<[string, number[], BigNumber[], string, string, string]>;

    getPrice(overrides?: CallOverrides): Promise<BigNumber>;

    governance(overrides?: CallOverrides): Promise<string>;

    initialize(
      presale: LibPresale.FairLaunchStruct,
      _fees: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      _linkAddress: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>
      ],
      _version: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    liquidityLockDays(overrides?: CallOverrides): Promise<BigNumber>;

    liquidityPercent(overrides?: CallOverrides): Promise<BigNumber>;

    liquidityUnlockTime(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    payment_currency(overrides?: CallOverrides): Promise<string>;

    poolDetails(overrides?: CallOverrides): Promise<string>;

    poolState(overrides?: CallOverrides): Promise<number>;

    poolType(overrides?: CallOverrides): Promise<number>;

    rate(overrides?: CallOverrides): Promise<BigNumber>;

    refundType(overrides?: CallOverrides): Promise<BigNumber>;

    refundedOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    router(overrides?: CallOverrides): Promise<string>;

    setGovernance(
      governance_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    softCap(overrides?: CallOverrides): Promise<BigNumber>;

    startTime(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<string>;

    totalClaimed(overrides?: CallOverrides): Promise<BigNumber>;

    totalRaised(overrides?: CallOverrides): Promise<BigNumber>;

    totalRefunded(overrides?: CallOverrides): Promise<BigNumber>;

    totalToken(overrides?: CallOverrides): Promise<BigNumber>;

    totalVolumePurchased(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateCompletedKyc(
      completed_: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePoolDetails(
      details_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    userAvalibleClaim(
      _userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawContribution(overrides?: CallOverrides): Promise<void>;

    withdrawLeftovers(overrides?: CallOverrides): Promise<void>;

    withdrawLiquidity(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "Cancelled(address,uint256)"(
      pool_address?: PromiseOrValue<string> | null,
      timestamp?: null
    ): CancelledEventFilter;
    Cancelled(
      pool_address?: PromiseOrValue<string> | null,
      timestamp?: null
    ): CancelledEventFilter;

    "Claimed(address,uint256,uint256,address)"(
      pool_address?: PromiseOrValue<string> | null,
      total_claimed?: null,
      pending_claim?: null,
      user_address?: null
    ): ClaimedEventFilter;
    Claimed(
      pool_address?: PromiseOrValue<string> | null,
      total_claimed?: null,
      pending_claim?: null,
      user_address?: null
    ): ClaimedEventFilter;

    "Contributed(address,uint256,address,uint256)"(
      pool_address?: PromiseOrValue<string> | null,
      value?: null,
      user?: null,
      totalRaised?: null
    ): ContributedEventFilter;
    Contributed(
      pool_address?: PromiseOrValue<string> | null,
      value?: null,
      user?: null,
      totalRaised?: null
    ): ContributedEventFilter;

    "ContributionWithdrawn(address,uint256,address)"(
      pool_address?: PromiseOrValue<string> | null,
      amount?: null,
      user?: null
    ): ContributionWithdrawnEventFilter;
    ContributionWithdrawn(
      pool_address?: PromiseOrValue<string> | null,
      amount?: null,
      user?: null
    ): ContributionWithdrawnEventFilter;

    "EmergencyLiquidityWithdrawn(address,address,uint256,address)"(
      pool_address?: PromiseOrValue<string> | null,
      user?: null,
      amount?: null,
      pair?: null
    ): EmergencyLiquidityWithdrawnEventFilter;
    EmergencyLiquidityWithdrawn(
      pool_address?: PromiseOrValue<string> | null,
      user?: null,
      amount?: null,
      pair?: null
    ): EmergencyLiquidityWithdrawnEventFilter;

    "EmergencyWithdrawn(address,address,uint256,address)"(
      pool_address?: PromiseOrValue<string> | null,
      user?: null,
      amount?: null,
      pair?: null
    ): EmergencyWithdrawnEventFilter;
    EmergencyWithdrawn(
      pool_address?: PromiseOrValue<string> | null,
      user?: null,
      amount?: null,
      pair?: null
    ): EmergencyWithdrawnEventFilter;

    "Finalized(address,address,uint256,uint256,uint256)"(
      pool_address?: PromiseOrValue<string> | null,
      user?: null,
      bnb_fee?: null,
      total_raised?: null,
      actual_raised?: null
    ): FinalizedEventFilter;
    Finalized(
      pool_address?: PromiseOrValue<string> | null,
      user?: null,
      bnb_fee?: null,
      total_raised?: null,
      actual_raised?: null
    ): FinalizedEventFilter;

    "GovernanceChanged(address,address,address)"(
      pool_address?: PromiseOrValue<string> | null,
      _old?: null,
      _new?: null
    ): GovernanceChangedEventFilter;
    GovernanceChanged(
      pool_address?: PromiseOrValue<string> | null,
      _old?: null,
      _new?: null
    ): GovernanceChangedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "KycUpdated(bool,uint256)"(
      completed?: null,
      timestamp?: null
    ): KycUpdatedEventFilter;
    KycUpdated(completed?: null, timestamp?: null): KycUpdatedEventFilter;

    "LiquidityWithdrawn(address,address,uint256,address)"(
      pool_address?: PromiseOrValue<string> | null,
      user?: null,
      amount?: null,
      pair?: null
    ): LiquidityWithdrawnEventFilter;
    LiquidityWithdrawn(
      pool_address?: PromiseOrValue<string> | null,
      user?: null,
      amount?: null,
      pair?: null
    ): LiquidityWithdrawnEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "PoolStartAtChanged(uint256,uint256)"(
      timestamp?: null,
      start_at?: null
    ): PoolStartAtChangedEventFilter;
    PoolStartAtChanged(
      timestamp?: null,
      start_at?: null
    ): PoolStartAtChangedEventFilter;

    "PoolUpdated(address,address,string)"(
      pool_address?: PromiseOrValue<string> | null,
      user?: null,
      details?: null
    ): PoolUpdatedEventFilter;
    PoolUpdated(
      pool_address?: PromiseOrValue<string> | null,
      user?: null,
      details?: null
    ): PoolUpdatedEventFilter;
  };

  estimateGas: {
    MINIMUM_LOCK_DAYS(overrides?: CallOverrides): Promise<BigNumber>;

    VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    cancel(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claim(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimedOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    completedKyc(overrides?: CallOverrides): Promise<BigNumber>;

    contribute(
      _funds: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    contributionOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    emergencyWithdraw(
      to_: PromiseOrValue<string>,
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    emergencyWithdrawContribution(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    emergencyWithdrawLiquidity(
      token_: PromiseOrValue<string>,
      to_: PromiseOrValue<string>,
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    emergencyWithdrawToken(
      payaddress: PromiseOrValue<string>,
      tokenAddress: PromiseOrValue<string>,
      tokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    endTime(overrides?: CallOverrides): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<BigNumber>;

    finalize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getDecimal(overrides?: CallOverrides): Promise<BigNumber>;

    getPoolInfo(overrides?: CallOverrides): Promise<BigNumber>;

    getPrice(overrides?: CallOverrides): Promise<BigNumber>;

    governance(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      presale: LibPresale.FairLaunchStruct,
      _fees: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      _linkAddress: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>
      ],
      _version: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    liquidityLockDays(overrides?: CallOverrides): Promise<BigNumber>;

    liquidityPercent(overrides?: CallOverrides): Promise<BigNumber>;

    liquidityUnlockTime(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    payment_currency(overrides?: CallOverrides): Promise<BigNumber>;

    poolDetails(overrides?: CallOverrides): Promise<BigNumber>;

    poolState(overrides?: CallOverrides): Promise<BigNumber>;

    poolType(overrides?: CallOverrides): Promise<BigNumber>;

    rate(overrides?: CallOverrides): Promise<BigNumber>;

    refundType(overrides?: CallOverrides): Promise<BigNumber>;

    refundedOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    router(overrides?: CallOverrides): Promise<BigNumber>;

    setGovernance(
      governance_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    softCap(overrides?: CallOverrides): Promise<BigNumber>;

    startTime(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    totalClaimed(overrides?: CallOverrides): Promise<BigNumber>;

    totalRaised(overrides?: CallOverrides): Promise<BigNumber>;

    totalRefunded(overrides?: CallOverrides): Promise<BigNumber>;

    totalToken(overrides?: CallOverrides): Promise<BigNumber>;

    totalVolumePurchased(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateCompletedKyc(
      completed_: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updatePoolDetails(
      details_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    userAvalibleClaim(
      _userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawContribution(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawLeftovers(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawLiquidity(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    MINIMUM_LOCK_DAYS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cancel(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claim(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimedOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    completedKyc(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    contribute(
      _funds: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    contributionOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    emergencyWithdraw(
      to_: PromiseOrValue<string>,
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    emergencyWithdrawContribution(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    emergencyWithdrawLiquidity(
      token_: PromiseOrValue<string>,
      to_: PromiseOrValue<string>,
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    emergencyWithdrawToken(
      payaddress: PromiseOrValue<string>,
      tokenAddress: PromiseOrValue<string>,
      tokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    endTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    finalize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getDecimal(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPoolInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    governance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      presale: LibPresale.FairLaunchStruct,
      _fees: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      _linkAddress: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>
      ],
      _version: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    liquidityLockDays(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidityPercent(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidityUnlockTime(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    payment_currency(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolDetails(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolState(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolType(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    refundType(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    refundedOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    router(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setGovernance(
      governance_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    softCap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    startTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalClaimed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalRaised(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalRefunded(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalVolumePurchased(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateCompletedKyc(
      completed_: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updatePoolDetails(
      details_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    userAvalibleClaim(
      _userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawContribution(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawLeftovers(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawLiquidity(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
